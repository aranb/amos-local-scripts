#!/bin/bash

export TABLE="usertable"
export CF="fam"
#export THREADS=150
export label=$1
shift
export approx_time=240

export ycsb_cmd="${HOME}/inst/ycsb/bin/ycsb run omid"
export ycsb_load_cmd="${HOME}/inst/ycsb/bin/ycsb load omid"
export ycsb_common_params="-cp ${HOME}/inst/tso-server/conf -P ${HOME}/inst/Sworkloada -p table=${TABLE} -p columnfamily=${CF} -p histogram.buckets=10"
export ycsb_run_params="-s"
export ycsb_load_params="-threads 100 -s"

export ops_param=" -p operationcount="


export batch_size=100
export timeout=200

export tso_cmd="${HOME}/inst/tso-server/bin/omid.sh tso -metricsConfigs console:_:10:SECONDS -networkIface en3 -batchPersistTimeout ${timeout}"
export tso_batchsize="-maxBatchSize"

threads=$@ #(1 2 5 10 20 50 100 120 150)

for thread in ${threads[@]}; do
	rate=$(echo "rate=${thread}*300; if (rate>1000) 1000 else rate" | bc -l)
	ops=$(echo "${rate}*${approx_time}" | bc -l)

	echo ""
	echo "Approx Rate = "${rate}" ops/sec, Threads="${thread}
	echo ""

	#kill TSO and clients
	pkill -f AmosClient
	pkill -f java.*tso-server.jar

	
	#clean hbase and start anew
	~/bin/clean_hbase
	~/bin/fresh_start.sh

	#start the tso
	echo ${tso_cmd} ${tso_batchsize} ${batch_size}
	${tso_cmd} ${tso_batchsize} ${batch_size} &> ~/out/tsoload_${label}_threads${thread}.txt &
	tso_pid=$!
	sleep 5

	#load the database
	echo ${ycsb_load_cmd} ${ycsb_common_params} ${ycsb_load_params}
	${ycsb_load_cmd} ${ycsb_common_params} ${ycsb_load_params}

	#Stop the TSO and start a new one with the new batch size (== no. of threads)
	kill ${tso_pid}
	echo ${tso_cmd} ${tso_batchsize} ${thread}
	${tso_cmd} ${tso_batchsize} ${thread}  &> ~/out/tso_${label}_threads${thread}.txt &
	tso_pid=$!
	sleep 5

	#start the test
	echo ${ycsb_cmd} ${ycsb_common_params} ${ycsb_run_params} ${ops_param}${ops} -threads ${thread}
	${ycsb_cmd} ${ycsb_common_params} ${ycsb_run_params} ${ops_param}${ops} -threads ${thread} &> ~/out/${label}_threads${thread}.txt &
	wait $!

	#stop the tso
	sleep 10 # wait for the last statistics output from the tso
	kill ${tso_pid}

done;
